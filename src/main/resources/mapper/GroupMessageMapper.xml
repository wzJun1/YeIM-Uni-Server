<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.wzjun1.yeimServer.mapper.GroupMessageMapper">

    <resultMap id="GroupMessageMap" type="cn.wzjun1.yeimServer.domain.GroupMessage">
        <id property="sequence" column="sequence" jdbcType="BIGINT"/>
        <result property="messageId" column="message_id" jdbcType="VARCHAR"/>
        <result property="conversationId" column="message_conversation_id" jdbcType="VARCHAR"/>
        <result property="conversationType" column="conversation_type" jdbcType="VARCHAR"/>
        <result property="direction" column="direction" jdbcType="VARCHAR"/>
        <result property="userId" column="user_id" jdbcType="VARCHAR"/>
        <result property="from" column="from" jdbcType="VARCHAR"/>
        <result property="to" column="to" jdbcType="VARCHAR"/>
        <result property="type" column="message_type" jdbcType="VARCHAR"/>
        <result property="body" column="body" jdbcType="OTHER" javaType="com.alibaba.fastjson.JSONObject"
                typeHandler="com.baomidou.mybatisplus.extension.handlers.FastjsonTypeHandler"/>
        <result property="extra" column="extra" jdbcType="LONGVARCHAR"/>
        <result property="isRead" column="is_read" jdbcType="INTEGER"/>
        <result property="isRevoke" column="is_revoke" jdbcType="INTEGER"/>
        <result property="isDeleted" column="is_deleted" jdbcType="INTEGER"/>
        <result property="receive" column="receive" jdbcType="INTEGER"/>
        <result property="status" column="message_status" jdbcType="VARCHAR"/>
        <result property="time" column="time" jdbcType="BIGINT"/>
        <association property="fromUserInfo" javaType="cn.wzjun1.yeimServer.domain.User">
            <result property="nickname" column="nickname" jdbcType="VARCHAR"/>
            <result property="avatarUrl" column="avatar_url" jdbcType="VARCHAR"/>
        </association>
    </resultMap>

    <select id="getMessageById" resultMap="GroupMessageMap">
        SELECT u.nickname,
               u.avatar_url,
               m.`sequence`,
               m.`user_id`,
               m.`direction`,
               m.`message_id`,
               m.`conversation_id` as message_conversation_id,
               m.`conversation_type`,
               m.`from`,
               m.`to`,
               m.`type`            as message_type,
               m.`body`,
               m.`extra`,
               m.`is_read`,
               m.`is_revoke`,
               m.`is_deleted`,
               m.`status`          as message_status,
               m.`receive`,
               m.`time`
        FROM `group_message` as m
                 LEFT JOIN `user` as u ON u.`user_id` = m.`from`
        WHERE m.`is_deleted` = 0
          and m.`message_id` = #{messageId}
          and m.`conversation_id` = #{conversationId}
    </select>


    <select id="listMessage" resultMap="GroupMessageMap">
        SELECT u.nickname,
               u.avatar_url,
               m.`sequence`,
               m.`message_id`,
               m.`user_id`,
               m.`direction`,
               m.`conversation_id` as message_conversation_id,
               m.`conversation_type`,
               m.`from`,
               m.`to`,
               m.`type`            as message_type,
               m.`body`,
               m.`extra`,
               m.`is_read`,
               m.`is_revoke`,
               m.`is_deleted`,
               m.`status`          as message_status,
               m.`receive`,
               m.`time`
        FROM (SELECT *
              FROM `group_message`
              WHERE `group_message`.`message_id` NOT IN (SELECT message_id
                                                         FROM `group_message_deleted`
                                                         WHERE `group_message_deleted`.`group_id` = #{conversationId}
                                                           AND `group_message_deleted`.`user_id` = #{userId})) as m
                 LEFT JOIN `user` as u ON u.`user_id` = m.`from`
        WHERE m.`conversation_id` = #{conversationId} AND (m.`to` = #{conversationId} or m.`to` = #{userId})
        ORDER BY m.`sequence` desc
    </select>

    <select id="listMessageByNextMessageId" resultMap="GroupMessageMap">
        SELECT u.nickname,
        u.avatar_url,
        m.`sequence`,
        m.`message_id`,
        m.`user_id`,
        m.`direction`,
        m.`conversation_id` as message_conversation_id,
        m.`conversation_type`,
        m.`from`,
        m.`to`,
        m.`type` as message_type,
        m.`body`,
        m.`extra`,
        m.`is_read`,
        m.`is_revoke`,
        m.`is_deleted`,
        m.`status` as message_status,
        m.`receive`,
        m.`time`
        FROM (SELECT *
        FROM `group_message`
        WHERE `group_message`.`message_id` NOT IN (SELECT message_id
        FROM `group_message_deleted`
        WHERE `group_message_deleted`.`group_id` = #{conversationId}
        AND `group_message_deleted`.`user_id` = #{userId})) as m
        LEFT JOIN `user` as u ON u.`user_id` = m.`from`
        WHERE 1=1
        <if test="nextMessageId != null and nextMessageId != ''">
            AND m.`sequence` &lt; (SELECT `sequence` FROM `group_message` WHERE `message_id` = #{nextMessageId})
        </if>
        AND m.`conversation_id` = #{conversationId} AND (m.`to` = #{conversationId} or m.`to` = #{userId})
        ORDER BY m.`sequence` desc
    </select>

    <insert id="deleteGroupMessage">
        INSERT INTO `group_message_deleted`(`message_id`, `group_id`, `user_id`, `created_at`)
        VALUES (#{messageId}, #{groupId}, #{userId}, #{createdAt})
    </insert>

</mapper>
